package org.geysermc.hydraulic.pack.modules;

import org.apache.commons.lang3.StringUtils;
import org.geysermc.hydraulic.Constants;
import org.geysermc.hydraulic.platform.mod.ModInfo;
import org.geysermc.hydraulic.util.PackUtil;
import org.geysermc.pack.bedrock.resource.BedrockResourcePack;
import org.geysermc.pack.bedrock.resource.Manifest;
import org.geysermc.pack.bedrock.resource.manifest.Header;
import org.geysermc.pack.bedrock.resource.manifest.Modules;
import org.geysermc.pack.converter.pipeline.*;
import org.geysermc.pack.converter.type.base.PackManifestConverter;
import org.jetbrains.annotations.Nullable;
import team.unnamed.creative.ResourcePack;
import team.unnamed.creative.metadata.pack.PackMeta;

import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

public class MetadataPackModule implements AssetExtractor<ModInfo>, AssetConverter<ModInfo, Manifest>, AssetCombiner<Manifest> {
    private final ModInfo modInfo;

    public MetadataPackModule(ModInfo modInfo) {
        this.modInfo = modInfo;
    }

    @Override
    public Collection<ModInfo> extract(ResourcePack pack, ExtractionContext context) {
        return List.of(this.modInfo);
    }

    @Override
    public @Nullable Manifest convert(ModInfo mod, ConversionContext context) throws Exception {
        Manifest manifest = PackManifestConverter.INSTANCE.convert(
                PackMeta.of(0, mod.name().trim() + " " + mod.version() + " - Generated by " + Constants.MOD_NAME),
                new ConversionContext(mod.name().trim() + " Resource Pack", context.logListener())
        );

        Header header = manifest.header();

        // Generate the pack uuid from the mod file
        String packUuid = PackUtil.getModUUID(mod.roots()).toString();
        header.uuid(packUuid);

        // Generate module uuid based on type
        for (Modules module : manifest.modules()) {
            module.uuid(UUID.nameUUIDFromBytes((module.type + packUuid).getBytes()).toString());
            module.description(mod.name().trim() + " " + StringUtils.capitalize(module.type));
        }

        return manifest;
    }

    @Override
    public void include(BedrockResourcePack pack, List<Manifest> manifests, CombineContext context) {
        pack.manifest(manifests.getFirst());

        // Copy the icon if it exists or copy the fallback icon
        try {
            if (this.modInfo.iconPath() != null) {
                pack.icon(Files.readAllBytes(this.modInfo.iconPath()));
            } else {
                try (InputStream stream = MetadataPackModule.class.getClassLoader().getResourceAsStream("unknown.png")) {
                    pack.icon(stream.readAllBytes());
                }
            }
        } catch (IOException ignored) {
        }
    }
}
